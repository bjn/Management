<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="MsmqTransportConfig" type="NServiceBus.Config.MsmqTransportConfig, NServiceBus.Core" />
    <section name="UnicastBusConfig" type="NServiceBus.Config.UnicastBusConfig, NServiceBus.Core" />
    <!-- If you want to use a database for subscription persistence, uncomment the following section and specify below the connection settings -->
    <!--<section name="DBSubscriptionStorageConfig" type="NServiceBus.Config.DBSubscriptionStorageConfig, NServiceBus.Core" />-->
    <!-- If you want to use a database for saga persistence, uncomment the following line and specify below the connection settings -->
    <!--<section name="NHibernateSagaPersisterConfig" type="NServiceBus.Config.NHibernateSagaPersisterConfig, NServiceBus.Core" />-->
  </configSections>


  <!-- 1. Input queue must be on the same machine as the process feeding off of it.
       2. Make sure that the error queue for all the NSB endpoints is set to this input queue, so that errors will be monitored.
       3. Set the ForwardReceivedMessagesTo to a queue name, where the message received in the error queue will be stored. Use
          the tool to reprocess the error in this queue, when the message needs to be reprocessed by the original endpoint.
       4. If you have your own endpoint that needs to process the error, change the endpoint in the message mapping. 
  -->

  <MsmqTransportConfig
    InputQueue="NServiceBus.Management.Errors.Alerter"
    ErrorQueue="NServiceBus.Management.Errors"
    NumberOfWorkerThreads="1"
    MaxRetries="5"
  />

  <UnicastBusConfig
    DistributorControlAddress=""
    DistributorDataAddress=""
    ForwardReceivedMessagesTo="">
    <MessageEndpointMappings>
      <add Messages="NServiceBus.Management.Errors.Messages" Endpoint ="NServiceBus.Management.Errors.Monitor" />
      <add Messages="NServiceBus.Management.Errors.Alerter.Messages" Endpoint ="NServiceBus.Management.Errors.Alerter" />
      <add Messages="NServiceBus.Saga.TimeoutMessage, NServiceBus" Endpoint="timeoutmanager" />
    </MessageEndpointMappings>
  </UnicastBusConfig>

  <appSettings>
    <!-- Saga Id, If this endpoint is restarted, we want the processing of the messages to belong to the same saga-->
    <add key="AlerterSagaId" value="65E6B1AB-47C1-4362-9C0C-40E400FDD6D0"/>
    
    <!--Wait for the configured amount of time in minutes before sending out any kind of alert. The support GUI will
    display the errors as they come in, so if the support team has already resolved those errors, no point in receiving
    an email about the error -->
    <add key="TimeToWaitBeforeAlerting" value="15"/>
    
    <!--If there are more than the set threshold limit, then there is no point overloading the email with all of the items.
    Instead notify that the error queue has the <n> number of messages. At this point, it should be a concern that you have
    a pile of error messages in the queue-->
    <add key="CriticalErrorLimit" value="5"/>
    
    <!-- settings needed for smtp notification-->
    <add key="RecipientList" value="ialagarsamy@walzgroup.com;"/>
    <add key="CCList" value=""/>
    <add key="BccList" value=""/>
  </appSettings>

  <!-- settings needed for smtp notification-->
  <system.net>
    <mailSettings>
      <smtp from="user@company.com">
        <network host="server" port="25" />
      </smtp>
    </mailSettings>
  </system.net>
  
</configuration>